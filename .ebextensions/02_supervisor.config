packages:
    python:
        supervisor: []

files:
    "/usr/etc/supervisord.conf":
        mode: "000755"
        owner: root
        group: root
        content: |
            [unix_http_server]
            file=/tmp/supervisor.sock   ; (the path to the socket file)

            [supervisord]
            logfile=/tmp/supervisord.log ; (main log file;default $CWD/supervisord.log)
            logfile_maxbytes=50MB        ; (max main logfile bytes b4 rotation;default 50MB)
            logfile_backups=10           ; (num of main logfile rotation backups;default 10)
            loglevel=info                ; (log level;default info; others: debug,warn,trace)
            pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
            nodaemon=false               ; (start in foreground if true;default false)
            minfds=1024                  ; (min. avail startup file descriptors;default 1024)
            minprocs=200                 ; (min. avail process descriptors;default 200)

            [rpcinterface:supervisor]
            supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

            [supervisorctl]
            serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket

            [include]
            files = /usr/etc/*.conf

            [inet_http_server]
            port = 127.0.0.1:9001

    /etc/init.d/supervisord:
        mode: "000755"
        owner: root
        group: root
        content: |
            #!/bin/bash

            # Source function library
            . /etc/rc.d/init.d/functions

            # Source system settings
            if [ -f /etc/sysconfig/supervisord ]; then
                . /etc/sysconfig/supervisord
            fi

            # Path to the supervisorctl script, server binary,
            # and short-form for messages.
            supervisorctl=/usr/sbin/supervisorctl
            supervisord=${SUPERVISORD-/usr/sbin/supervisord}
            prog=supervisord
            pidfile=${PIDFILE-/tmp/supervisord.pid}
            lockfile=${LOCKFILE-/var/lock/subsys/supervisord}
            STOP_TIMEOUT=${STOP_TIMEOUT-60}
            OPTIONS="${OPTIONS--c /usr/etc/supervisord.conf}"
            RETVAL=0

            start() {
                echo -n $"Starting $prog: "
                daemon --pidfile=${pidfile} $supervisord $OPTIONS
                RETVAL=$?
                echo
                if [ $RETVAL -eq 0 ]; then
                    touch ${lockfile}
                    $supervisorctl $OPTIONS status
                fi
                return $RETVAL
            }

            stop() {
                echo -n $"Stopping $prog: "
                killproc -p ${pidfile} -d ${STOP_TIMEOUT} $supervisord
                RETVAL=$?
                echo
                [ $RETVAL -eq 0 ] && rm -rf ${lockfile} ${pidfile}
            }

            reload() {
                echo -n $"Reloading $prog: "
                LSB=1 killproc -p $pidfile $supervisord -HUP
                RETVAL=$?
                echo
                if [ $RETVAL -eq 7 ]; then
                    failure $"$prog reload"
                else
                    $supervisorctl $OPTIONS status
                fi
            }

            restart() {
                stop
                start
            }

            case "$1" in
                start)
                    start
                    ;;
                stop)
                    stop
                    ;;
                status)
                    status -p ${pidfile} $supervisord
                    RETVAL=$?
                    [ $RETVAL -eq 0 ] && $supervisorctl $OPTIONS status
                    ;;
                restart)
                    restart
                    ;;
                condrestart|try-restart)
                    if status -p ${pidfile} $supervisord >&/dev/null; then
                    stop
                    start
                    fi
                    ;;
                force-reload|reload)
                    reload
                    ;;
                *)
                    echo $"Usage: $prog {start|stop|restart|condrestart|try-restart|force-reload|reload}"
                    RETVAL=2
                esac

                exit $RETVAL

    "/opt/elasticbeanstalk/hooks/appdeploy/post/run_supervised_rq.sh":
        mode: "000755"
        owner: root
        group: root
        content: |
            #!/usr/bin/env bash

            $rqconf = "[program:rqworker]
            ; Point the command to the specific rq command you want to run.
            ; If you use virtualenv, be sure to point it to
            ; /path/to/virtualenv/bin/rq
            ; Also, you probably want to include a settings module to configure this
            ; worker.  For more info on that, see http://python-rq.org/docs/workers/
            command=/var/app/venv/staging-LQM1lest/bin/rq worker -c app/config
            ; process_num is required if you specify >1 numprocs
            process_name=%(program_name)s-%(process_num)s

            ; If you want to run more than one worker instance, increase this
            numprocs=1

            ; This is the directory from which RQ is ran. Be sure to point this to the
            ; directory where your source code is importable from
            directory=/var/app/current

            ; RQ requires the TERM signal to perform a warm shutdown. If RQ does not die
            ; within 10 seconds, supervisor will forcefully kill it
            stopsignal=TERM

            ; These are up to you
            autostart=true
            autorestart=true"

            echo "$rqconf" | tee /usr/etc/rq.conf

            # Add configuration script to supervisord conf (if not there already)
            if ! grep -Fxq "[include]" /usr/etc/supervisord.conf
                then
                echo "[include]" | tee -a /usr/etc/supervisord.conf
                echo "files: rq.conf" | tee -a /usr/etc/supervisord.conf
            fi

            # Reread the supervisord config
            supervisorctl -c /usr/etc/supervisord.conf reread

            # Update supervisord in cache without restarting all services
            supervisorctl -c /usr/etc/supervisord.conf update

            # Start/Restart rq through supervisord
            supervisorctl -c /usr/etc/supervisord.conf restart rqworker

commands:
  01_start_supervisor:
    command: '/etc/init.d/supervisord restart'
    leader_only: true